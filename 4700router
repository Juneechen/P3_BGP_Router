#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
from MessageHandler import MessageHandler
import utils
from copy import deepcopy
from collections import defaultdict

class Router:
    ''' 
    Class to represent the router
    '''
    relations = {}
    sockets = {}
    ports = {}
    cache = [] # list of dictionaries, each is a routing announcement
    routing_table = defaultdict(list) # network -> a list of all known routes { 'dest network': [{ localpref : 100, ...  }, {}, ...] }

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        self.message_handler = MessageHandler(self)

        for relationship in connections:
            port, neighbor, relation = relationship.split('-')

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ 'type': 'handshake', 'src': self.our_addr(neighbor), 'dst': neighbor, 'msg': {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return '%d.%d.%d.%d' % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network])) 

    def sendJson(self, network, message):
        self.sockets[network].sendto(json.dumps(message).encode('utf-8'), ('localhost', self.ports[network])) #modified

    def cache_update(self, update_msg: dict, srcif):
        ''' Cache the update message
        '''
        cache_msg = deepcopy(update_msg)
        self.cache.append(cache_msg)

    def update_table(self, msg: dict, srcif):
        '''       
        msg from srcif: {
                "network": "172.168.0.0",
                "netmask": "255.255.0.0",
                "localpref": 100,
                "ASPath": [2],
                "origin": "EGP",
                "selfOrigin": true
            },
        add key "peer" (nexthop for this path) = srcif
        '''
        network = msg['network']
        copy = deepcopy(msg)
        copy['peer'] = srcif
        self.routing_table[network].append(copy)


    def get_route(self, srcif, dest):
        ''' 
        Find the route to a destination network, return the next hop if exists.
        encoding IP addresses as numbers and using bitwise logic to determine 
        (1) whether two addresses match and 
        (2) the length of the match in bits
        Find longest prefix match and apply rules to get the next hop
        Check relations, drop “data” messages when the transit relationship is not profitable.
        '''

        # encoding IP addresses and mask as numbers
        dest_ip_int = utils.parse_ip(dest)

        # Find all matching routes
        matching_routes = []
        for network, list_of_routes in self.routing_table.items():
            for route in list_of_routes:
                network_ip_int = utils.parse_ip(network)
                mask_int = utils.parse_ip(route['netmask'])

                # apply bitwise logic and find all matches, 
                # in case the longest match does not satisfy rules (maybe src is peer and next hope is also peer?)
                if (dest_ip_int & mask_int) == (network_ip_int & mask_int):
                    matching_routes.append(route)
        
        # if source is not customer, filter out non-customer next hops
        if self.relations[srcif] != 'cust':
            matching_routes = [route for route in matching_routes if self.relations[route['peer']] == 'cust']

        if not matching_routes:
            return None
        else:
            # print(f'\n------ ALL MATCHING ROUTES to {dest}: {matching_routes} ------------')
            sorted_routes = sorted(matching_routes, key=utils.custom_sort)
            best_route = sorted_routes[0]['peer']
            # print(f'------ BEST ROUTES to {dest}: {best_route} ------------\n')
            return sorted_routes[0]['peer']
    

    def run(self):
        while True:
            # get sockets that are ready for reading, wait for up to 0.1 seconds
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            # read from each ready socket
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                # identify the socket currently being read from
                for sock in self.sockets: 
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break # found
                msg = k.decode('utf-8')

                # print("Received message '%s' from %s" % (msg, srcif))

                self.message_handler.handle_message(msg, srcif)
        return
    

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help='AS number of this router')
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help='connections')
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
